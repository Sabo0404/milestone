// <auto-generated />
using System;
using F1Schedule.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace F1Schedule.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20191108193233_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("F1Schedule.Models.Cars.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Number");

                    b.Property<int>("engineHP");

                    b.Property<int>("mguHP");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("F1Schedule.Models.Drivers.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CarId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("TeamId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("F1Schedule.Models.Places.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Number");

                    b.Property<int>("Points");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("F1Schedule.Models.RaceResults.RaceResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DriverId");

                    b.Property<int?>("PlaceId");

                    b.Property<int?>("RaceId");

                    b.Property<float>("Time");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceResults");
                });

            modelBuilder.Entity("F1Schedule.Models.Races.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("F1Schedule.Models.SeasonRaces.SeasonRace", b =>
                {
                    b.Property<int>("SeasonId");

                    b.Property<int>("RaceId");

                    b.HasKey("SeasonId", "RaceId");

                    b.HasIndex("RaceId");

                    b.ToTable("SeasonRaces");
                });

            modelBuilder.Entity("F1Schedule.Models.Seasons.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("F1Schedule.Models.Teams.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("SeasonId");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("F1Schedule.Models.Drivers.Driver", b =>
                {
                    b.HasOne("F1Schedule.Models.Cars.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId");

                    b.HasOne("F1Schedule.Models.Teams.Team")
                        .WithMany("Drivers")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("F1Schedule.Models.RaceResults.RaceResult", b =>
                {
                    b.HasOne("F1Schedule.Models.Drivers.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("F1Schedule.Models.Places.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");

                    b.HasOne("F1Schedule.Models.Races.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");
                });

            modelBuilder.Entity("F1Schedule.Models.SeasonRaces.SeasonRace", b =>
                {
                    b.HasOne("F1Schedule.Models.Races.Race", "Race")
                        .WithMany("Seasons")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("F1Schedule.Models.Seasons.Season", "Season")
                        .WithMany("Races")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("F1Schedule.Models.Teams.Team", b =>
                {
                    b.HasOne("F1Schedule.Models.Seasons.Season")
                        .WithMany("Teams")
                        .HasForeignKey("SeasonId");
                });
#pragma warning restore 612, 618
        }
    }
}
